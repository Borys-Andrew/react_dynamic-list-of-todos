{"version":3,"sources":["types/FilterTypes.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","components/helpers/filterTodos.tsx","index.tsx"],"names":["FilterType","TodoList","todos","selectTodo","selectedTodo","className","map","todo","id","title","completed","classNames","type","onClick","TodoFilter","React","memo","sortBy","handleSortBy","searchQuery","handleQuery","handleClearQuery","value","onChange","e","target","ALL","ACTIVE","COMPLETED","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","getTodos","a","getUser","userId","Loader","TodoModal","seletedTodo","onModalClose","useState","user","setUser","hasUserError","setHasUserError","isLoading","setisLoading","useEffect","fetchUserById","userByIdFromServer","href","email","name","App","setTodos","setSelectedTodo","setSearchQuery","setSortBy","setIsLoading","isTodosLoaded","setIsTodosLoaded","hasTodosError","setHasTodosError","fetchTodos","todosFromServer","useCallback","handleSelectDoto","visibleTodos","useMemo","filterType","query","filter","toLowerCase","includes","getFilteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.594d2c2e.chunk.js","sourcesContent":["export enum FilterType {\n  ALL = 'all',\n  ACTIVE = 'active',\n  COMPLETED = 'completed',\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[];\n  selectTodo: (todo: Todo) => void;\n  selectedTodo: Todo | null;\n\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  selectTodo,\n  selectedTodo,\n}) => {\n  return (\n    <table className=\"table is-narrow is-fullwidth\">\n      <thead>\n        <tr>\n          <th>#</th>\n          <th>\n            <span className=\"icon\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </th>\n          <th>Title</th>\n          <th> </th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {todos.map(todo => {\n          const { id, title, completed } = todo;\n\n          return (\n\n            <tr\n              data-cy=\"todo\"\n              className={classNames({\n                'has-background-info-light': selectedTodo === todo,\n              })}\n            >\n              {' '}\n              <td className=\"is-vcentered\">{id}</td>\n              <td className=\"is-vcentered\">\n                {completed && (\n                  <span\n                    className=\"icon\"\n                    data-cy=\"iconCompleted\"\n                  >\n                    <i className=\"fas fa-check\" />\n                  </span>\n                )}\n              </td>\n              <td className=\"is-vcentered is-expanded\">\n                <p className={classNames({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {title}\n                </p>\n              </td>\n              <td className=\"has-text-right is-vcentered\">\n                <button\n                  data-cy=\"selectButton\"\n                  className=\"button\"\n                  type=\"button\"\n                  onClick={() => selectTodo(todo)}\n                >\n                  <span className=\"icon\">\n                    <i className={classNames({\n                      'far fa-eye-slash': selectedTodo === todo,\n                      'far fa-eye': selectedTodo !== todo,\n                    })}\n                    />\n                    {' '}\n                  </span>\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import React from 'react';\nimport { FilterType } from '../../types/FilterTypes';\n\ntype Props = {\n  sortBy: string,\n  handleSortBy: (value: FilterType) => void,\n  searchQuery: string,\n  handleQuery: (value: string) => void,\n  handleClearQuery: (value: string) => void,\n};\n\nexport const TodoFilter: React.FC<Props> = React.memo(({\n  sortBy,\n  handleSortBy,\n  searchQuery,\n  handleQuery,\n  handleClearQuery,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          value={sortBy}\n          onChange={(e) => {\n            handleSortBy(e.target.value as FilterType);\n          }}\n        >\n          <option value={FilterType.ALL}>All</option>\n          <option value={FilterType.ACTIVE}>Active</option>\n          <option value={FilterType.COMPLETED}>Completed</option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={searchQuery}\n        onChange={(e) => {\n          handleQuery(e.target.value);\n        }}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {searchQuery && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            aria-label=\"Clear search\"\n            onClick={() => {\n              handleClearQuery('');\n            }}\n          />\n        </span>\n      )}\n    </p>\n  </form>\n));\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promime\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see now the laoder works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = async () => get<Todo[]>('/todos');\n\nexport const getUser = async (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { Todo } from '../../types/Todo';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\n\ntype Props = {\n  seletedTodo: Todo,\n  onModalClose: (value: null) => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({ seletedTodo, onModalClose }) => {\n  const {\n    userId,\n    title,\n    completed,\n    id,\n  } = seletedTodo;\n  const [user, setUser] = useState<User | null>(null);\n  const [hasUserError, setHasUserError] = useState(false);\n  const [isLoading, setisLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchUserById = async () => {\n      try {\n        const userByIdFromServer = await getUser(userId);\n\n        setUser(userByIdFromServer);\n      } catch (error) {\n        setHasUserError(true);\n      } finally {\n        setisLoading(false);\n      }\n    };\n\n    fetchUserById();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && <Loader />}\n      {!hasUserError && !isLoading && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => onModalClose(null)}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? <strong className=\"has-text-success\">Done</strong>\n                : <strong className=\"has-text-danger\">Planned</strong>}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { Todo } from './types/Todo';\nimport { FilterType } from './types/FilterTypes';\nimport { getFilteredTodos } from './components/helpers/filterTodos';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortBy, setSortBy] = useState<FilterType>(FilterType.ALL);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isTodosLoaded, setIsTodosLoaded] = useState(false);\n  const [hasTodosError, setHasTodosError] = useState<string>('');\n\n  useEffect(() => {\n    const fetchTodos = async () => {\n      try {\n        setIsLoading(true);\n        const todosFromServer = await getTodos();\n\n        setTodos(todosFromServer);\n        setIsTodosLoaded(true);\n      } catch (error) {\n        setHasTodosError(`Oppps smth went wrong, error: ${error}`);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchTodos();\n  }, []);\n\n  const handleQuery = useCallback(\n    (value: string) => {\n      setSearchQuery(value);\n    },\n    [],\n  );\n\n  const handleClearQuery = useCallback(\n    (value: string) => {\n      setSearchQuery(value);\n      setSortBy(FilterType.ALL);\n    },\n    [],\n  );\n\n  const handleSortBy = useCallback(\n    (value: FilterType) => {\n      setSortBy(value);\n    },\n    [],\n  );\n\n  const handleSelectDoto = useCallback(\n    (todo: Todo) => {\n      setSelectedTodo(todo);\n    },\n    [],\n  );\n\n  const visibleTodos = useMemo(() => getFilteredTodos(\n    todos,\n    sortBy,\n    searchQuery,\n  ), [\n    todos,\n    sortBy,\n    searchQuery,\n  ]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                sortBy={sortBy}\n                handleSortBy={handleSortBy}\n                searchQuery={searchQuery}\n                handleQuery={handleQuery}\n                handleClearQuery={handleClearQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {hasTodosError && <span>{hasTodosError}</span>}\n              {isTodosLoaded && (\n                <TodoList\n                  todos={visibleTodos}\n                  selectTodo={handleSelectDoto}\n                  selectedTodo={selectedTodo}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          seletedTodo={selectedTodo}\n          onModalClose={setSelectedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { FilterType } from '../../types/FilterTypes';\nimport { Todo } from '../../types/Todo';\n\nexport function getFilteredTodos(\n  todos: Todo[],\n  filterType: FilterType,\n  query: string,\n) {\n  let visibleTodos = [...todos];\n\n  switch (filterType) {\n    case FilterType.ACTIVE:\n      visibleTodos = visibleTodos.filter(todo => !todo.completed);\n      break;\n\n    case FilterType.COMPLETED:\n      visibleTodos = visibleTodos.filter(todo => todo.completed);\n      break;\n\n    case FilterType.ALL:\n    default:\n      break;\n  }\n\n  return visibleTodos\n    .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n}\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}